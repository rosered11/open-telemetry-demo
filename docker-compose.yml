services:
  product:
    image: rosered11-otel:product
    container_name: product
    build:
      context: ./
      dockerfile: ./src/product/Product.Api/Dockerfile
    deploy:
      resources:
        limits:
          memory: 160M
    restart: unless-stopped
    ports:
      - "8088:80"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      # - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=product
      - ASPNETCORE_URLS=http://*:80
    depends_on:
      otel-collector:
        condition: service_started
      jaeger:
        condition: service_started
      kafka-init-topics:
        condition: service_completed_successfully
  order:
    image: rosered11-otel:order
    container_name: order
    build:
      context: ./
      dockerfile: ./src/order/Order.Api/Dockerfile
    deploy:
      resources:
        limits:
          memory: 160M
    restart: unless-stopped
    ports:
      - "8089:80"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      # - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=order
      - ASPNETCORE_URLS=http://*:80
    depends_on:
      otel-collector:
        condition: service_started
      jaeger:
        condition: service_started
      kafka-init-topics:
        condition: service_completed_successfully
  otel-collector:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.135.0
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    user: 0:0
    volumes:
      - ./src/otel-collector/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - "4318"
      - "4317"
    depends_on:
      jaeger:
        condition: service_started
      # opensearch:
      #   condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - GOMEMLIMIT=160MiB

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    deploy:
      resources:
        limits:
          memory: 1.1G
    restart: unless-stopped
    environment:
      - cluster.name=demo-cluster
      - node.name=demo-node
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms300m -Xmx300m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    # volumes:
    #   - ./src/elastic/es-init-scripts:/usr/share/elasticsearch/init-scripts:ro
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -E '"status":"(green|yellow)"'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    # command: >
    #   sh -c "
    #   /usr/local/bin/docker-entrypoint.sh eswrapper &
    #   until curl -s http://localhost:9200; do sleep 2; done
    #   && for f in /usr/share/elasticsearch/init-scripts/*.sh; do sh $f; done
    #   && wait
    #   "
  prometheus:
    image: quay.io/prometheus/prometheus:v3.4.2
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --web.enable-otlp-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "9090:9090"
  
  jaeger:
    image: jaegertracing/jaeger:2.10.0
    deploy:
      resources:
        limits:
          memory: 1200M
    restart: unless-stopped
    volumes:
      - ./src/jaeger/otelcol-config-elastic.yml:/etc/otelcol-config-elastic.yml
    command: ["--config", "/etc/otelcol-config-elastic.yml"]
    ports:
      - "9091:16686"         # Jaeger UI
      - "4317:4317"
      - "4318:4318"
    depends_on:
      elasticsearch:
        condition: service_healthy
      prometheus:
        condition: service_started
  # jaeger:
  #   image: jaegertracing/jaeger:2.10.0
  #   container_name: jaeger
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1200M
  #   restart: unless-stopped
  #   ports:
  #     - "9091:16686"         # Jaeger UI
  #   depends_on: 
  #     - jaeger-core

  # Grafana
  # grafana:
  #   image: grafana/grafana:12.0.2
  #   container_name: grafana
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 120M
  #   restart: unless-stopped
  #   environment:
  #     - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
  #   volumes:
  #     - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
  #     - ./src/grafana/provisioning/:/etc/grafana/provisioning/
  #   ports:
  #     - "9030:3000"
  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "9030:3000"

  kafka:
    image: rosered11-otel:kafka
    container_name: kafka
    build:
      context: ./
      dockerfile: ./src/kafka/Dockerfile
      args:
        OTEL_JAVA_AGENT_VERSION: 2.18.1
    deploy:
      resources:
        limits:
          memory: 620M
    restart: unless-stopped
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      # - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      # - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      # - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=kafka
      - KAFKA_HEAP_OPTS=-Xmx400m -Xms400m
      # Workaround on OSX for https://bugs.openjdk.org/browse/JDK-8345296
      - _JAVA_OPTIONS
    healthcheck:
      test: nc -z kafka 9092
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
  kafka-init-topics:
    image: apache/kafka:3.9.1
    depends_on:
      - kafka
    entrypoint:
      - sh
      - -c
      - |
        echo "Waiting for Kafka to be ready..." && \
        sleep 5 && \
        /opt/kafka/bin/kafka-topics.sh --create \
          --topic orders \
          --bootstrap-server kafka:9092 && \
        echo "Topics created!"